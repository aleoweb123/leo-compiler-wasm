[package]
name = "leo-compiler-wasm"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]
# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
wasm-bindgen = "0.2.87"

leo-parser = { workspace = true }
leo-span = { workspace = true }
leo-errors = { workspace = true }
leo-ast = { workspace = true }
leo-passes = { workspace = true }
# leo-compiler = { path = "./leo/compiler/compiler" }

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.6", optional = true }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
wee_alloc = { version = "0.4.5", optional = true }
# leo-parser = "1.6.3"

sha2 = "0.10.6"
indexmap = "1.9.2"
tracing = "0.1.37"
web-sys = {version = "0.3.64",features = ["console"]}

[dependencies.getrandom]
optional = true
version = "0.2"
features = ["js"]

[dependencies.snarkvm-console]
features = ["wasm"]

[features]
default = ["console_error_panic_hook"]
wasm = [ "snarkvm-console/wasm","getrandom"]

[dev-dependencies]
wasm-bindgen-test = "0.3.34"

[profile.release]
# Tell `rustc` to optimize for small code size.
opt-level = "s"